/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package superAdminPanel;

import classes.ScrollBar;
import classes.tablActionCellRenderer11;
import classes.tableActionCellEditor11;
import classes.tableActionEvent11;
import connection.Connect;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import swing.PictureBox;

/**
 *
 * @author Hector
 */
public class accountManagement extends javax.swing.JPanel {

  
    
    
    Connection con;
    PreparedStatement pst;
    ResultSet rs;
    
    
    
    public accountManagement() {
        initComponents();
        jScrollPane1.setVerticalScrollBar(new ScrollBar());
       
        
        con = Connect.con();
        
        
        
        // Table action button
        tableActionEvent11 event11 = new tableActionEvent11() {
            @Override
            public void onEdit(int row) {
                System.out.println("EDIT ROW: " + row);
                
                 int selectedrow  =tableAccounts.getSelectedRow();
              
             if (selectedrow != -1) {
               
                 Object[] rowData = new Object[4];

             for (int i = 0; i < 4; i++) {
                rowData[i] =  tableAccounts.getValueAt(selectedrow, i);
                 }

             id_txt.setText(rowData[0].toString());
             username_txt.setText(rowData[2].toString());
             password_txt.setText(rowData[3].toString());
             
             
                     
        }
               
             
            
             
                 }

            @Override
            public void onDelete(int row) {
              
                if (tableAccounts.isEditing()) {
                    tableAccounts.getCellEditor().stopCellEditing();
                }
                deleteUserAaccount();
            }
        };
                
                
        tableAccounts.getColumnModel().getColumn(4).setCellRenderer(new tablActionCellRenderer11() );
        tableAccounts.getColumnModel().getColumn(4).setCellEditor(new tableActionCellEditor11( event11) );
        
        
        
        
        
        
        //Display table
          try {
            pst = con.prepareCall("SELECT brgy_officials.Id, brgy_officials.Name, officials_data.username, officials_data.password FROM brgy_officials "
                    + "INNER JOIN officials_data ON brgy_officials.id = officials_data.brgy_off_id; ");
            rs = pst.executeQuery();
            
            while(rs.next()){
            Object[] rowdata = new Object[4];
            
            for(int i = 0; i < 4; i++){
            
                rowdata[i] =rs.getObject(i+1);
            
            }
            tableAccounts.addRow(rowdata);
            
            }
        } catch (SQLException ex) {
            Logger.getLogger(accountManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
          
          
          
          
          int nextId = NextIdFromDatabase();
       id_txt.setText(String.valueOf(nextId));
       
    }

  
    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooser1 = new com.raven.datechooser.DateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableAccounts = new classes.Table();
        jLabel1 = new javax.swing.JLabel();
        panelShadow1 = new swing.PanelShadow();
        jLabel4 = new javax.swing.JLabel();
        addOfficial_btn = new classes.Button();
        password_txt = new classes.Passwordfeild();
        username_txt = new classes.Textfield();
        j = new javax.swing.JLabel();
        id_txt = new classes.Textfield();
        jLabel3 = new javax.swing.JLabel();
        showPass = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(255, 255, 255));

        tableAccounts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID no.", "Fullname", "Username", "Password", "Action"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableAccounts);

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(76, 76, 76));
        jLabel1.setText("Manage Account");

        panelShadow1.setBackground(new java.awt.Color(202, 207, 210));

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(39, 55, 70));
        jLabel4.setText("Password");

        addOfficial_btn.setText("Save");
        addOfficial_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOfficial_btnActionPerformed(evt);
            }
        });

        j.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        j.setForeground(new java.awt.Color(39, 55, 70));
        j.setText("Username");

        id_txt.setEditable(false);

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 15)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(39, 55, 70));
        jLabel3.setText("ID no.");

        showPass.setForeground(new java.awt.Color(255, 255, 255));
        showPass.setText("Show Password");
        showPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelShadow1Layout = new javax.swing.GroupLayout(panelShadow1);
        panelShadow1.setLayout(panelShadow1Layout);
        panelShadow1Layout.setHorizontalGroup(
            panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelShadow1Layout.createSequentialGroup()
                .addGap(0, 253, Short.MAX_VALUE)
                .addComponent(addOfficial_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(233, 233, 233))
            .addGroup(panelShadow1Layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showPass, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(username_txt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(j, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(password_txt, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                        .addComponent(id_txt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelShadow1Layout.setVerticalGroup(
            panelShadow1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelShadow1Layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(id_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(j, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(username_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(password_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPass)
                .addGap(4, 4, 4)
                .addComponent(addOfficial_btn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 932, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addComponent(panelShadow1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelShadow1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addOfficial_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOfficial_btnActionPerformed

        if (!username_txt.getText().isEmpty()) {
        if (!password_txt.getText().isEmpty()) {
            
          int uID = Integer.parseInt(id_txt.getText());
          String username = username_txt.getText();
          String password = String.valueOf(password_txt.getPassword());
            
            updateOfficial(uID, username, password);
            
            username_txt.setText("");
            password_txt.setText("");
            
          loadDatafromDataBase();
          
          int id = NextIdFromDatabase();
          id_txt.setText(String.valueOf(id));
            
        } else {
            JOptionPane.showMessageDialog(null,"Password is empty.");
        }
        } else {
            JOptionPane.showMessageDialog(null,"Username is empty.");
        }
        
        
    }//GEN-LAST:event_addOfficial_btnActionPerformed

    private void showPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPassActionPerformed

        if(showPass.isSelected()){
            password_txt.setEchoChar('\0');
        }else{
            password_txt.setEchoChar('\u2022');
        }
    }//GEN-LAST:event_showPassActionPerformed

    private void deleteUserAaccount(){

 int selectedRow = tableAccounts.getSelectedRow();

              
                    // Extract information from the selected row
                    int userId = (int) tableAccounts.getValueAt(selectedRow, 0);

                    // Construct the SQL DELETE statement
                    String sql = "DELETE FROM brgy_officials WHERE id = ?";

                    try (PreparedStatement statement = con.prepareStatement(sql)) {
                        // Set the parameter in the DELETE statement
                        statement.setInt(1, userId);

                        // Execute the DELETE statement
                        statement.executeUpdate();

                        // Remove the selected row from the JTable model
                        DefaultTableModel model = (DefaultTableModel) tableAccounts.getModel();
                        model.removeRow(selectedRow);

                      
                       
                    
                    } catch (SQLException ex) {
                        Logger.getLogger(accountManagement.class.getName()).log(Level.SEVERE, null, ex);
                    }



}
    
    
    //load database
    private void loadDatafromDataBase(){
     
      
         
         DefaultTableModel model = (DefaultTableModel) tableAccounts.getModel();
         model.setRowCount(0);
         
         try {
            pst = con.prepareCall("SELECT brgy_officials.Id, brgy_officials.Name, officials_data.username, officials_data.password FROM brgy_officials "
                    + "INNER JOIN officials_data ON brgy_officials.id = officials_data.brgy_off_id; ");
            rs = pst.executeQuery();
            
            while(rs.next()){
            Object[] rowdata = new Object[4];
            
            for(int i = 0; i < 4; i++){
            
                rowdata[i] =rs.getObject(i+1);
            
            }
            tableAccounts.addRow(rowdata);
            
            }
        } catch (SQLException ex) {
            Logger.getLogger(accountManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
         
     }
    
    
    
 private int NextIdFromDatabase() {
    int nextId = 0;

    try {
        // Get the auto-increment value for the table
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery("SHOW TABLE STATUS LIKE 'brgy_officials'");
        
        if (rs.next()) {
            nextId = rs.getInt("Auto_increment");
        }

        stmt.close();
    } catch (SQLException ex) {
        Logger.getLogger(accountManagement.class.getName()).log(Level.SEVERE, null, ex);
    }

    return nextId;
}    
 
 

 
 
 //update table
 
 private void updateOfficial(int id, String usrname, String pass) {
  
       
        String sql1 = "UPDATE `officials_data` SET  `username` = ?, `password` = ? WHERE `brgy_off_id` = ?";
        
        
        
        try {
            pst = con.prepareCall(sql1);
            pst.setString(1, usrname);
            pst.setString(2, pass);
            pst.setInt(3, id);
            pst.executeUpdate();
            
            
            
        } catch (SQLException ex) {
            Logger.getLogger(accountManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
}
 
 
 
 


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private classes.Button addOfficial_btn;
    private com.raven.datechooser.DateChooser dateChooser1;
    private classes.Textfield id_txt;
    private javax.swing.JLabel j;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private swing.PanelShadow panelShadow1;
    private classes.Passwordfeild password_txt;
    private javax.swing.JCheckBox showPass;
    private classes.Table tableAccounts;
    private classes.Textfield username_txt;
    // End of variables declaration//GEN-END:variables
}
